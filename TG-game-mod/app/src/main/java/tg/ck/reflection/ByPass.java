package tg.ck.reflection;

import android.content.Context;
import android.os.Build;
import android.util.Base64;

import java.io.File;
import java.io.FileOutputStream;
import java.lang.reflect.Method;

import dalvik.system.DexFile;

public class ByPass {
    private static final String DEX_FILE = "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aG9kOwAeTHp0L2NrL3JlZmxlY3Rpb24vQnVpbGRDb25maWc7ABlMenQvY2svcmVmbGVjdGlvbi9CeVBhc3M7ABRMenQvY2svcmVmbGVjdGlvbi9SOwAiTHp0L2NrL3JlZmxlY3Rpb24vUmVmbGVjdGlvblV0aWxzOwAPUmVmbGVjdGlvblV0aWxzABRSZWZsZWN0aW9uVXRpbHMuamF2YQAHU0RLX0lOVAABVgAMVkVSU0lPTl9DT0RFAAxWRVJTSU9OX05BTUUAAlZMAANWTEwAAVoAAlpMAAJbQgASW0xqYXZhL2xhbmcvQ2xhc3M7ABNbTGphdmEvbGFuZy9PYmplY3Q7ABNbTGphdmEvbGFuZy9TdHJpbmc7AAZhcHBlbmQADGJvb2xlYW5WYWx1ZQARY3VycmVudFRpbWVNaWxsaXMAAWQAF2RhbHZpay5zeXN0ZW0uVk1SdW50aW1lAAZkZWNvZGUABmRlbGV0ZQARZXJyb3IgZ2V0IG1ldGhvZHMABmV4aXN0cwAHZm9yTmFtZQALZ2V0Q2FjaGVEaXIAEGdldENhbm9uaWNhbE5hbWUAEWdldERlY2xhcmVkTWV0aG9kAApnZXRSdW50aW1lAAZpbnZva2UACWxvYWRDbGFzcwAHcGFzc0FsbAAMcGFzc0FwaUNoZWNrAA1wYXNzQnlEZXhGaWxlAA9wYXNzQnlXaGl0ZUxpc3QAD3ByaW50U3RhY2tUcmFjZQAHcmVsZWFzZQAWc2V0SGlkZGVuQXBpRXhlbXB0aW9ucwAIdG9TdHJpbmcACXZtUnVudGltZQAFd3JpdGUAEHp0LmNrLnJlZmxlY3Rpb24AWH5+RDh7ImNvbXBpbGF0aW9uLW1vZGUiOiJyZWxlYXNlIiwiaGFzLWNoZWNrc3VtcyI6ZmFsc2UsIm1pbi1hcGkiOjE2LCJ2ZXJzaW9uIjoiMS42LjgyIn0ABgABAAEZARkBGQEZARkBGRWBgAS8CQEAAwAHGhaBgASgDAEJ1AkBCowKAAABABmCgASwDwIABAAICgEKGoiABLANAYGABJgPAQm4DAGJAeQMBhdRF0wfFwAEARcCARcKAAAAAAAADwAAAAAAAAABAAAAAAAAAAEAAABTAAAAcAAAAAIAAAAdAAAAvAEAAAMAAAARAAAAMAIAAAQAAAAKAAAA/AIAAAUAAAAeAAAATAMAAAYAAAAEAAAAPAQAAAEgAAAJAAAAvAQAAAMgAAAIAAAAyAcAAAEQAAAMAAAAEAgAAAIgAABTAAAAdAgAAAAgAAAEAAAAYg0AAAUgAAACAAAAsw0AAAMQAAABAAAAxA0AAAAQAAABAAAAyA0AAA==";

    public static boolean passApiCheck(Context context) {
        if(Build.VERSION.SDK_INT < Build.VERSION_CODES.P) {
            return true;
        }

        if(ReflectionUtils.passAll()) {
            return true;
        }

        return passByDexFile(context);
    }

    private static boolean passByDexFile(Context context) {
        byte[] dexBytes = Base64.decode(DEX_FILE, Base64.NO_WRAP);

        File codeCacheDir = context.getCacheDir();
        File code = new File(codeCacheDir, System.currentTimeMillis() + ".dex");

        try {
            FileOutputStream fout = new FileOutputStream(code);
            fout.write(dexBytes);

            DexFile dexFile = new DexFile(code);
            Class<?> ReflectionUtilsClass = dexFile.loadClass(ReflectionUtils.class.getCanonicalName(), null);
            Method passAll = ReflectionUtilsClass.getDeclaredMethod("passAll");

            return (boolean) passAll.invoke(null);
        } catch (Exception e) {
            e.printStackTrace();
            return false;
        } finally {
            if (code.exists()) {
                code.delete();
            }
        }
    }
}
